{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Arial-BoldMT;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red24\green133\blue146;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c7451\c58824\c63922;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 FTP_CLIENT
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs22\fsmilli11333 \cf0 #include<stdio.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<stdlib.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<sys/socket.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<netinet/in.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<unistd.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<string.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<arpa/inet.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 int main ()
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 FILE *fp;
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 int csd,n,ser,s,cli,cport,newst;
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 char name[100],rcvg[100],fname[100];
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 struct sockaddr_in servaddr;
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("enetr the port");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 scanf("%d",&cport);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 csd=(socket(AF_INET,SOCK_STREAM,0));
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 if (csd<0)
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 perror("socketerrror");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 exit(1);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 else
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("socket is created");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 servaddr.sin_family=AF_INET;
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 //servaddr.sin_addr.s_addr= htonl(INADDR_ANY);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 inet_pton(AF_INET,"127.0.0.1",&servaddr.sin_addr);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 servaddr.sin_port=htons(cport);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 if (connect(csd,(struct sockaddr*)&servaddr,sizeof(servaddr))<0)
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("error in connection");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 exit(1);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 else\{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("CONNECTED \\n");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("enter existing file name/t");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 scanf("%s",name);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("enetr new file name)\\t");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 scanf("%s",fname);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 fp=fopen(fname,"w");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 send(csd,name,sizeof(name),0);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 while(1)
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 s=recv(csd,rcvg,100,0);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 rcvg[s]='\\0';
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 if(strcmp(rcvg,"error")==0)
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("File not available");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 break;
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 if (strcmp(rcvg,"completed")==0)
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("file is transmitted");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 fclose(fp);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 close(csd);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 break;
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 else
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 fputs(rcvg,stdout);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("%s",rcvg);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 return 0;
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}\cb3 \}\cb1 \}
\f1\b0\fs24 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf0 FTP_SERVER
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs22\fsmilli11333 \cf0 #include<stdio.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<stdlib.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<unistd.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<sys/types.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<sys/socket.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<string.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<arpa/inet.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<netinet/in.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 #include<fcntl.h>
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 int main ()
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 FILE *fp;
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 int sd,newsd,scr,n,a,cli,pid,bd,port,clilen;
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 char name [100],fileread[100],fname[100],ch,file[100],rcv[100];
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 struct sockaddr_in servaddr,cliaddr;
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("enetr port adress");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 scanf("%d",&port);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 sd=socket(AF_INET,SOCK_STREAM,0);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 if(sd<0)
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("cant created,\\n");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 exit(1);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 else
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("socket is created\\n");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 servaddr.sin_family=AF_INET;
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 servaddr.sin_addr.s_addr=htonl(INADDR_ANY);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 servaddr.sin_port=htons(port);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 a=sizeof(servaddr);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 bd=bind(sd,(struct sockaddr*)&servaddr,a);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 if(bd<0)
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("cannot bind \\n");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 exit(1);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 else
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("binded\\n");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 listen(sd,5);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 clilen=sizeof(cliaddr);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 newsd=accept(sd,(struct sockaddr*)&cliaddr,&clilen);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 if (newsd<0)
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("Cant accept");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 else
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("accepted");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 n=recv(newsd,rcv,100,0);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 rcv[n]='\\0';
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 fp=fopen(rcv,"r");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 if(fp==NULL)
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 send(newsd,"error",5,0);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 close(newsd);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 else
\f1\b0\fs24 \
\

\f0\b\fs22\fsmilli11333 while(fgets(fileread,sizeof(fileread),0)<0)
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 if(send(newsd,fileread,sizeof(fileread),0)<0)
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 printf("cant dent dile conetent");
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}sleep(1);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 if(!fgets(fileread,sizeof(fileread),fp))
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \{
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 send(newsd,"completed",999999999,0);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 return(0);
\f1\b0\fs24 \

\f0\b\fs22\fsmilli11333 \}
\f1\b0\fs24 \
}